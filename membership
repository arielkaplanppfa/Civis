drop table if exists ppfa_golden.golden_membership_activities;
Create table ppfa_golden.golden_membership_activities(
 ppid varchar(30) not null,
 kind varchar(20) not null,
 activity_date date not null,
 activity_type_1  Varchar(1024),
activity_type_2  Varchar(1024),
 amount  numeric (38,2),
 source  varchar(30) not null,
 activity_id  Varchar(1024),
source_system  Varchar(1024) );

--Gift Activity
insert into ppfa_golden.golden_membership_activities
with temp as (
select *
from rounddata.supreme_reporting_table
where credit_type ilike 'Hard' and has_soft_credit is null
and source_code like '4NA%' and gau_credit_code like '%UR%' and stagename = 'Completed'
UNION
select *
from rounddata.supreme_reporting_table
where credit_type not ilike 'Hard' 
and source_code like '4NA%' and gau_credit_code like '%UR%' and stagename = 'Completed')
select idr.resolved_id, 'Gift' as kind, closedate as activity_date, channel as activity_type_1, null as activity_type_2, amount as amount, source_code as source, transaction_id as activity_id, 'rounddata' as Source_system
from temp t 
join rounddata.contact c on t.ngoc_accountid = c.accountid
join idres_analytics.current_customer_graph idr on c.id = idr.source_primary_key;


--Need Action Activity


--Lifetime and contributing

drop table if exists ppfa_golden.golden_membership;
Create table ppfa_golden.golden_membership (
 ppid varchar(30) not null,
 Membership varchar(40) not null,
 Active varchar(1) not null,
 start_date date,
 end_date  date,
 recent_activity_kind varchar(20),
 recent_activity_id  varchar(30),
 email  Varchar(1024),
phone  Varchar(1024) );

insert into ppfa_golden.golden_membership
with temp as (
select idr.resolved_id,  p.*, Case when rc_bios__type = 'National Lifetime' then 1 else 2 end as membership_rank, row_number() over(partition by idr.resolved_id, Case when rc_bios__type = 'National Lifetime' then 1 else 2 end order by case when p.rc_bios__active ilike 'true' then 1 else 2 end asc, rc_bios__start_date desc, rc_bios__end_date desc) as row_num
from rounddata.rc_bios__preference p
join rounddata.contact c on p.rc_bios__account = c.accountid
join idres_analytics.current_customer_graph idr on c.id = idr.source_primary_key
where p.delete_flag <> 'Y' and p.rc_bios__category = 'Constituent Type' and p.rc_bios__subcategory = 'Action Fund Member' and p.rc_bios__type not in ('Affiliate PPAZ Annual','National Associate','Affiliate PPSE Lifetime') )
select resolved_id, Case when rc_bios__type = 'National Lifetime' then 'Lifetime' else 'Contributing' end as membership, Case when rc_bios__active ilike 'true' then 'Y' else 'N' end as active, trunc(rc_bios__start_date) as start_date,trunc(rc_bios__end_date) as end_date
from temp;
  


/*
drop table if exists ppfa_golden.golden_membership;
create table ppfa_golden.golden_membership as (
select distinct resolved_id from ppfa_golden.current_customer_graph where resolved_id not like '001%' and resolved_id not like '003%'
);

ALTER TABLE  ppfa_golden.golden_diversity ADD COLUMN Gender varchar(1024);
ALTER TABLE  ppfa_golden.golden_diversity ADD COLUMN Gender_source varchar(1024);
ALTER TABLE  ppfa_golden.golden_diversity ADD COLUMN Orientation varchar(1024);
ALTER TABLE  ppfa_golden.golden_diversity ADD COLUMN Pronouns  Varchar(1024);
ALTER TABLE  ppfa_golden.golden_diversity ADD COLUMN Age  Varchar(1024);
ALTER TABLE  ppfa_golden.golden_diversity ADD COLUMN Birth_date  date;
ALTER TABLE  ppfa_golden.golden_diversity ADD COLUMN Birth_date_source  date;
ALTER TABLE  ppfa_golden.golden_diversity ADD COLUMN Race  Varchar(1024);
ALTER TABLE  ppfa_golden.golden_diversity ADD COLUMN Race_confidence  Varchar(1024);

--Gender - self reported
Update ppfa_golden.golden_diversity  
set Gender = reportedgendername, Gender_source = 'Self-Reported'
from (
select resolved_id, i.reportedgendername, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY datemodified desc) as "gender_rank"
from ppfa_golden.current_customer_graph g 
join vansync.ppfa_contactsreportedgenders_mym m on g.source_primary_key = m.vanid
join vansync.ppfa_reportedgenders i on m.reportedgenderid = i.reportedgenderid ) f 
where golden_diversity.resolved_id = f.resolved_id and gender_rank = 1 and gender is null;

--Gender - Catalist
Update ppfa_golden.golden_diversity  
set Gender = catalist_gender, gender_source = 'Catalist' 
from (
select resolved_id, catalist_gender
from catalist_monthly.current_catalist_return where catalist_gender <> 'unknown' ) f 
where golden_diversity.resolved_id = f.resolved_id and gender is null;

--SHOULD WE ADD AN UPDATE STATEMENT THAT SAYS WHEN GENDER IS CIS AND PRONOUNS IS HE HIM SET GNEDER TO MALE ETC...

--Pronouns - rD
Update ppfa_golden.golden_diversity  
set pronouns = preferred_pronouns
from (
select resolved_id, preferred_pronouns, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY preferred_pronouns desc) as "noun_rank"
from ppfa_golden.current_customer_graph g 
join rounddata.contact m on g.source_primary_key = m.id
where preferred_pronouns is not null) f 
where golden_diversity.resolved_id = f.resolved_id and noun_rank = 1 and pronouns is null;


--Race - self reported
Update ppfa_golden.golden_diversity  
set Race = 
CASE  
when reportedracename = 'Asian' then 'Asian, Asian American, South Asian, and/or Southeast Asian'
when reportedracename = 'Other' then 'Other'
when reportedracename = 'Caucasian or White' then 'Caucasian or White'
when reportedracename = 'Hispanic' then 'Hispanic and/or Latina/o/x'
when reportedracename = 'Pacific Islander' then 'Pacific Islander'
when reportedracename = 'Middle Eastern' then 'Arab American and/or Middle Eastern'
when reportedracename = 'Native American' then 'Native American and/or Indigenous'
when reportedracename = 'Black or African American' then 'Black, African, or African American'
when reportedracename = 'Native Hawaiian' then 'Native Hawaiian' else null end 
, race_confidence = 'Self-Reported'
from (
select resolved_id, i.reportedracename, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY datemodified desc) as "race_rank"
from ppfa_golden.current_customer_graph g 
join vansync.ppfa_contactsreportedraces_mym m on g.source_primary_key = m.vanid
join vansync.ppfa_reportedraces i on m.reportedraceid = i.reportedraceid ) f 
where golden_diversity.resolved_id = f.resolved_id and race_rank = 1 and race is null;

--race - catalist
Update ppfa_golden.golden_diversity  
set race = 
CASE  
when catalist_race = 'nativeAmerican' then 'Native American and/or Indigenous'
when catalist_race = 'other' then 'Other'
when catalist_race = 'asian' then 'Asian, Asian American, South Asian, and/or Southeast Asian'
when catalist_race = 'hispanic' then 'Hispanic and/or Latina/o/x'
when catalist_race = 'caucasian' then 'Caucasian or White'
when catalist_race = 'black' then 'Black, African, or African American' else null end 
, race_confidence = catalist_raceconfidence 
from (
select resolved_id, catalist_race, catalist_raceconfidence
from catalist_monthly.current_catalist_return 
  where catalist_race is not null and catalist_race <> 'unknown' and catalist_raceconfidence in ('Possibly','Likely','HighlyLikely') ) f 
where golden_diversity.resolved_id = f.resolved_id and race is null;
*/

/*
Update ppfa_golden.catalist_source  
set first_name = firstname 
from (select resolved_id, c.firstname, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY length(firstname) desc) as "name_rank"
from ppfa_golden.current_customer_graph g 
join rounddata.contact c on g.source_primary_key = c.id
where exists (select 'x' from ppfa_golden.catalist_rd_only_clusters t where g.resolved_id = t.resolved_id) and firstname is not null ) f 
where catalist_source.resolved_id = f.resolved_id and name_rank = 1 ;

Update ppfa_golden.catalist_source  
set first_name = firstname 
from (select resolved_id, c.firstname, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY length(firstname) desc) as "name_rank"
from ppfa_golden.current_customer_graph g 
join vansync.ppfa_contacts_mym c on g.source_primary_key = c.vanid
where exists (select 'x' from ppfa_golden.catalist_van_only_clusters t where g.resolved_id = t.resolved_id) and firstname is not null) f 
where catalist_source.resolved_id = f.resolved_id and name_rank = 1 ;

Update ppfa_golden.catalist_source  
set first_name = firstname 
from (select resolved_id, firstname, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY length(firstname) desc) as "name_rank"
from (
select resolved_id, firstname
from ppfa_golden.current_customer_graph g 
join rounddata.contact c on g.source_primary_key = c.id
UNION
select resolved_id, firstname
from ppfa_golden.current_customer_graph g 
join vansync.ppfa_contacts_mym c on g.source_primary_key = c.vanid
)  g 
where exists (select 'x' from ppfa_golden.catalist_cross_clusters t where g.resolved_id = t.resolved_id) and firstname is not null) f 
where catalist_source.resolved_id = f.resolved_id and name_rank = 1 ;

--Last Names
Update ppfa_golden.catalist_source  
set last_name = lastname 
from (select resolved_id, c.lastname, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY length(lastname) desc) as "name_rank"
from ppfa_golden.current_customer_graph g 
join rounddata.contact c on g.source_primary_key = c.id
where exists (select 'x' from ppfa_golden.catalist_high_touch t where g.resolved_id = t.resolved_id) and lastname is not null ) f 
where catalist_source.resolved_id = f.resolved_id and name_rank = 1 ;

Update ppfa_golden.catalist_source  
set last_name = lastname
from (select resolved_id, c.lastname, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY length(lastname) desc) as "name_rank"
from ppfa_golden.current_customer_graph g 
join rounddata.contact c on g.source_primary_key = c.id
where exists (select 'x' from ppfa_golden.catalist_rd_only_clusters t where g.resolved_id = t.resolved_id) and lastname is not null ) f 
where catalist_source.resolved_id = f.resolved_id and name_rank = 1 ;

Update ppfa_golden.catalist_source  
set last_name = lastname 
from (select resolved_id, c.lastname, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY length(lastname) desc) as "name_rank"
from ppfa_golden.current_customer_graph g 
join vansync.ppfa_contacts_mym c on g.source_primary_key = c.vanid
where exists (select 'x' from ppfa_golden.catalist_van_only_clusters t where g.resolved_id = t.resolved_id) and lastname is not null) f 
where catalist_source.resolved_id = f.resolved_id and name_rank = 1 ;

Update ppfa_golden.catalist_source  
set last_name = lastname 
from (select resolved_id, lastname, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY length(lastname) desc) as "name_rank"
from (
select resolved_id, lastname
from ppfa_golden.current_customer_graph g 
join rounddata.contact c on g.source_primary_key = c.id
UNION
select resolved_id, lastname
from ppfa_golden.current_customer_graph g 
join vansync.ppfa_contacts_mym c on g.source_primary_key = c.vanid
)  g 
where exists (select 'x' from ppfa_golden.catalist_cross_clusters t where g.resolved_id = t.resolved_id) and lastname is not null) f 
where catalist_source.resolved_id = f.resolved_id and name_rank = 1 ;

--Middle Names
Update ppfa_golden.catalist_source  
set middle_name = rc_bios__middle_name 
from (select resolved_id, c.rc_bios__middle_name, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY length(rc_bios__middle_name) desc) as "name_rank"
from ppfa_golden.current_customer_graph g 
join rounddata.contact c on g.source_primary_key = c.id
where exists (select 'x' from ppfa_golden.catalist_high_touch t where g.resolved_id = t.resolved_id) and rc_bios__middle_name is not null ) f 
where catalist_source.resolved_id = f.resolved_id and name_rank = 1 ;

Update ppfa_golden.catalist_source  
set middle_name = rc_bios__middle_name 
from (select resolved_id, c.rc_bios__middle_name, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY length(rc_bios__middle_name) desc) as "name_rank"
from ppfa_golden.current_customer_graph g 
join rounddata.contact c on g.source_primary_key = c.id
where exists (select 'x' from ppfa_golden.catalist_rd_only_clusters t where g.resolved_id = t.resolved_id) and rc_bios__middle_name is not null ) f 
where catalist_source.resolved_id = f.resolved_id and name_rank = 1 ;

Update ppfa_golden.catalist_source  
set middle_name = middlename 
from (select resolved_id, c.middlename, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY length(middlename) desc) as "name_rank"
from ppfa_golden.current_customer_graph g 
join vansync.ppfa_contacts_mym c on g.source_primary_key = c.vanid
where exists (select 'x' from ppfa_golden.catalist_van_only_clusters t where g.resolved_id = t.resolved_id) and middlename is not null) f 
where catalist_source.resolved_id = f.resolved_id and name_rank = 1 ;

Update ppfa_golden.catalist_source  
set middle_name = middlename 
from (select resolved_id, middlename, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY length(middlename) desc) as "name_rank"
from (
select resolved_id, rc_bios__middle_name as "middlename"
from ppfa_golden.current_customer_graph g 
join rounddata.contact c on g.source_primary_key = c.id
UNION
select resolved_id, middlename 
from ppfa_golden.current_customer_graph g 
join vansync.ppfa_contacts_mym c on g.source_primary_key = c.vanid
)  g 
where exists (select 'x' from ppfa_golden.catalist_cross_clusters t where g.resolved_id = t.resolved_id) and middlename is not null) f 
where catalist_source.resolved_id = f.resolved_id and name_rank = 1 ;

--Address
Update ppfa_golden.catalist_source 
set v_street = coalesce(m.street_1,'')||' '||coalesce(m.street_2,'')||' '||coalesce(m.street_3,''), v_city = m.city, v_state = m.state, v_zip = m.zip
from ( select ppid, street_1, street_2, street_3, city, state, zip, address_rank, golden_rank, ROW_NUMBER () OVER ( PARTITION BY ppid ORDER BY address_rank desc, date desc) as "Van_rank" from ppfa_golden.staging_mailing_address where source like 'Van%' ) m where resolved_id = m.ppid and m.van_rank =1 ;

Update ppfa_golden.catalist_source 
set v_street = coalesce(m.street_1,'')||' '||coalesce(m.street_2,'')||' '||coalesce(m.street_3,''), v_city = m.city, v_state = m.state, v_zip = m.zip
from ( select ppid, street_1, street_2, street_3, city, state, zip, address_rank, golden_rank, ROW_NUMBER () OVER ( PARTITION BY ppid ORDER BY address_rank desc, date desc) as "rd_rank" from ppfa_golden.staging_mailing_address where source not like 'Van%' ) m where resolved_id = m.ppid and m.rd_rank = 1 and v_street is null;

Update ppfa_golden.catalist_source 
set m_street = coalesce(m.street_1,'')||' '||coalesce(m.street_2,'')||' '||coalesce(m.street_3,''),m_city = m.city, m_state = m.state, m_zip = m.zip
from ( select ppid, street_1, street_2, street_3, city, state, zip, address_rank, golden_rank, ROW_NUMBER () OVER ( PARTITION BY ppid ORDER BY address_rank desc, date desc) as "rd_rank" from ppfa_golden.staging_mailing_address where source not like 'Van%' ) m where resolved_id = m.ppid and m.rd_rank =1 ;

Update ppfa_golden.catalist_source 
set m_street = coalesce(m.street_1,'')||' '||coalesce(m.street_2,'')||' '||coalesce(m.street_3,''),m_city = m.city, m_state = m.state, m_zip = m.zip
from ( select ppid, street_1, street_2, street_3, city, state, zip, address_rank, golden_rank, ROW_NUMBER () OVER ( PARTITION BY ppid ORDER BY address_rank desc, date desc) as "van_rank" from ppfa_golden.staging_mailing_address where source  like 'Van%' ) m where resolved_id = m.ppid and m.van_rank = 1 and m_street is null;

--Phones
update ppfa_golden.catalist_source
set  phone = p.home_phone
from (select * from ppfa_golden.golden_phones ) p 
where catalist_source.resolved_id = p.resolved_id;

update ppfa_golden.catalist_source
set  phone = g.phone
from (select p.resolved_id, m.phone,  ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY preferredphone desc, datecreated desc) as "phone_rank" 
      from ppfa_golden.current_customer_graph p join vansync.ppfa_contactsphones_mym m on p.source_primary_key = m.vanid
       where datesuppressed is null) g 
where catalist_source.resolved_id = g.resolved_id
and catalist_source.phone is null and g.phone_rank = 1;


--Birthdates
update ppfa_golden.catalist_source
set birth_date = b.birthdate
from (
  select g.resolved_id, left(birthdate,11)::date as "birthdate",ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY createddate desc) as "birth_rank"  
  from ppfa_golden.current_customer_graph g join rounddata.contact m on g.source_primary_key = m.id
  where birthdate is not null
  ) b
where catalist_source.resolved_id = b.resolved_id
and catalist_source.birth_date is null and b.birth_rank = 1 ;

update ppfa_golden.catalist_source
set birth_date = b.birthdate
from (
  select g.resolved_id, left(dob,11)::date as "birthdate",ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY datecreated desc) as "birth_rank"  
  from ppfa_golden.current_customer_graph g join vansync.ppfa_contacts_mym m on g.source_primary_key = m.vanid
  where dob is not null
  ) b
where catalist_source.resolved_id = b.resolved_id
and catalist_source.birth_date is null and b.birth_rank = 1 ;


update ppfa_golden.catalist_source
set birth_date = b.birthdate
from (
  select g.resolved_id, to_date(rc_bios__birth_year,'YYYY') as "birthdate",ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY createddate desc) as "birth_rank"  
  from ppfa_golden.current_customer_graph g join rounddata.contact m on g.source_primary_key = m.id
  where rc_bios__birth_year is not null
  ) b
where catalist_source.resolved_id = b.resolved_id
and catalist_source.birth_date is null and b.birth_rank = 1 ;

-- emails
update ppfa_golden.catalist_source
set email = u.email
From (
  select g.resolved_id, e.email, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY datefirstread desc) as "email_rank"
  from ppfa_golden.current_customer_graph g join vansync.ppfa_contactsemailbatches_mym e on g.source_primary_key = e.vanid
  where datebounced is null ) u
  where catalist_source.resolved_id = u.resolved_id
  and u.email_rank = 1;
  
  
update ppfa_golden.catalist_source
set email = u.valuex
From (
  select g.resolved_id, c.valuex, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY createddate desc) as "email_rank"
  from  ppfa_golden.current_customer_graph g join rounddata.additional_contact_info c on g.source_primary_key = c.contact
  where typex = 'Email' and preferred = 'true'
  ) u
  where catalist_source.resolved_id = u.resolved_id
  and u.email_rank = 1 and catalist_source.email is null;
  
  update ppfa_golden.catalist_source
set email = u.valuex
From (
  select g.resolved_id, c.valuex, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY createddate desc) as "email_rank"
  from  ppfa_golden.current_customer_graph g join rounddata.additional_contact_info c on g.source_primary_key = c.contact
  where typex = 'Email' and preferred = 'false'
  ) u
  where catalist_source.resolved_id = u.resolved_id
  and u.email_rank = 1 and catalist_source.email is null;
  
  update ppfa_golden.catalist_source
set email = u.email
From (
  select g.resolved_id, e.email, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY datecreated desc) as "email_rank"
  from ppfa_golden.current_customer_graph g join vansync.ppfa_contactsemails_mym e on g.source_primary_key = e.vanid
  where datesuppressed is null ) u
  where catalist_source.resolved_id = u.resolved_id
  and u.email_rank = 1 and catalist_source.email is null;
  
  update ppfa_golden.catalist_source
set email = u.email
From (
  select g.resolved_id, e.email, ROW_NUMBER () OVER ( PARTITION BY resolved_id ORDER BY datecreated desc) as "email_rank"
  from ppfa_golden.current_customer_graph g join vansync.ppfa_contacts_mym e on g.source_primary_key = e.vanid
  where email is not null ) u
  where catalist_source.resolved_id = u.resolved_id
  and u.email_rank = 1 and catalist_source.email is null;
  
  
  
select * from ppfa_golden.catalist_source;
*/