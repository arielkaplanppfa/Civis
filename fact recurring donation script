Call npsp_reporting.recurring_donation_datamart();
-- CREATE OR REPLACE PROCEDURE npsp_reporting.recurring_donation_datamart()
-- LANGUAGE plpgsql
-- AS $$
-- DECLARE

-- 	v_inserted_timestamp TIMESTAMP; -- Timestamp used TO INSERT INTO the job_history TABLE.
--     v_watermark TIMESTAMP;
--     v_action_count INT;
--     dropSQL VARCHAR(65535) := '';
--     stg_table_SQL varchar(65535) :='';
--    	mergeSQL varchar(65535) :='';
   
-- BEGIN
--     v_inserted_timestamp := CURRENT_TIMESTAMP;
--     --v_watermark := '1900-01-01 00:00:00';

		
-- 	-- INSERT INTO npsp_integration.job_step_history (jobstep, lastrun, runstatus, notes, results, transactionid, recordcount)
--  	-- VALUES (146::integer,v_inserted_timestamp,'started','Recurring Donations Datamart job has started.',NULL, NULL, NULL);

	
-- 	-- Low watermark is the max lastmodified date of the source.
-- 	EXECUTE 'SELECT CASE WHEN to_char(max(lastmodifieddate)::timestamp,''YYYY-MM-DD HH24:MM:SS'') IS NULL THEN ''2023-01-01 00:00:00'' ELSE to_char(max(lastmodifieddate)::timestamp,''YYYY-MM-DD HH24:MM:SS'')
--                     END max_timestamp FROM npsp_reporting.fact_recurring_donation' INTO v_watermark;

-- 	dropSQL := 'DROP TABLE IF EXISTS npsp_staging.stg_fact_recurring_donation';
	
-- 	EXECUTE dropSQL;
-- 	stg_table_SQL := 'CREATE TABLE npsp_staging.stg_fact_recurring_donation as
-- 						SELECT recurring_donation AS Id, current_timestamp::timestamp AS lastmodifieddate,min(closedate) as First_Donation_Date__c, max(closedate) as last_dontation_date__c 
-- 						FROM npsp_sfdc.opportunity_v o
-- 						join npsp_sfdc.opppayment_v p on p.opportunity = o.id 
-- 						WHERE p.paid = TRUE
--                          AND o.isdeleted = FALSE AND p.isdeleted = FALSE
-- 						    AND o.recurring_donation != ''''
-- 							AND o.lastmodifieddate >='''|| v_watermark||'''
-- 						    GROUP BY o.recurring_donation';
-- 	EXECUTE stg_table_SQL;


-- 	mergeSQL := 'MERGE INTO npsp_reporting.fact_recurring_donation
-- 					USING npsp_staging.stg_fact_recurring_donation
-- 					ON npsp_reporting.fact_recurring_donation.id = npsp_staging.stg_fact_recurring_donation.id
					
-- 					WHEN MATCHED THEN 
-- 						UPDATE SET 
-- 							LastModifiedDate = npsp_staging.stg_fact_recurring_donation.LastModifiedDate,
-- 							First_Donation_Date__c = npsp_staging.stg_fact_recurring_donation.First_Donation_Date__c,
-- 							last_dontation_date__c = npsp_staging.stg_fact_recurring_donation.last_dontation_date__c
-- 					WHEN NOT MATCHED THEN
-- 						INSERT (
-- 							Id,
-- 							LastModifiedDate,
-- 							First_Donation_Date__c,
-- 							last_dontation_date__c
-- 						)
-- 						VALUES (
-- 							npsp_staging.stg_fact_recurring_donation.Id,
-- 							npsp_staging.stg_fact_recurring_donation.LastModifiedDate,
-- 							npsp_staging.stg_fact_recurring_donation.First_Donation_Date__c,
-- 							npsp_staging.stg_fact_recurring_donation.last_dontation_date__c)';
	
-- 	EXECUTE mergeSQL;
	
-- 	GET DIAGNOSTICS v_action_count = ROW_COUNT; 
		
-- --  	UPDATE npsp_integration.job_step_history 
-- --  	SET runstatus = 'complete',
-- --  		lastrun = CURRENT_TIMESTAMP,
-- --  		results  = 'Updated ROWCOUNT: '|| v_action_count::INT,
-- --  		recordcount = v_action_count::INT,
-- --         notes = 'Recurring Donations completed successfully.'
-- --  	WHERE lastrun = v_inserted_timestamp AND jobstep = 146::integer;
 
 
-- -- EXCEPTION WHEN OTHERS THEN 
-- --  	-- Log the error
-- --  	RAISE INFO 'An exception occurred.';
-- --  	UPDATE npsp_integration.job_step_history
-- --  	SET runstatus = 'failed',
-- --  		lastrun = CURRENT_TIMESTAMP,
-- --  		notes = 'Error message: '|| SQLERRM 
-- --  	WHERE lastrun = v_inserted_timestamp AND jobstep = 146::integer;
-- END;
-- $$;