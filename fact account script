CALL npsp_reporting.account_datamart();
-- CREATE OR REPLACE PROCEDURE npsp_reporting.account_datamart()
-- LANGUAGE plpgsql
-- AS $$
-- DECLARE 

-- 	v_inserted_timestamp TIMESTAMP; -- Timestamp used TO INSERT INTO the job_step_history TABLE.
--    	v_fg_watermark TIMESTAMP;
--     v_sus_watermark TIMESTAMP;
--     v_gl_watermark TIMESTAMP;
--     v_action_count INT;
--     dropSQL VARCHAR(65535) := '';
--     stg_table_SQL varchar(65535) :='';
--    stg_fact_account2 varchar(65535) :='';
--    	mergeSQL varchar(65535) :='';
--    src_table_SQL varchar(65535) := '';
--     v_watermark TIMESTAMP;

-- BEGIN 

-- 	-- Inserts a row into the job history table with the status = started

-- 	v_inserted_timestamp := CURRENT_TIMESTAMP;
-- 	--v_watermark := '1900-01-01 00:00:00';
			
-- 	INSERT INTO npsp_integration.job_step_history (jobstep, lastrun, runstatus, notes, results, transactionid, recordcount)
--  	VALUES (144::integer,v_inserted_timestamp,'started','Account Datamart job has started.',NULL, NULL, NULL);
		
-- 	   -- watermark is the max last run timestamp of the daily sync mulesoft job.
-- 	EXECUTE 'SELECT to_char(max(last_modified_date)- INTERVAL ''1 day'',''YYYY-MM-DD HH24:MI:SS'') FROM npsp_reporting.fact_giving_summary' INTO v_watermark; 
	
	
		
-- 	    -- Drop the fact giving summary staging table
-- 	EXECUTE 'DROP TABLE IF EXISTS npsp_staging.stg_src_hash_table CASCADE';
-- 	EXECUTE 'DROP TABLE IF EXISTS npsp_staging.stg_account cascade';
-- 	EXECUTE 'DROP TABLE IF EXISTS npsp_staging.stg_fact_account cascade';
-- 	EXECUTE 'DROP TABLE IF EXISTS npsp_staging.stg_src_hash_table2 CASCADE';

-- --	EXECUTE 'CREATE TABLE IF NOT EXISTS npsp_staging.stg_src_hash_table(
-- --						src_hash bigint,
-- --						accountid varchar(18)
-- --					)';
	
		
	
-- 		src_table_SQL:= 'CREATE TABLE npsp_staging.stg_src_hash_table2 AS 
-- 						(SELECT fnv_hash(id||Lifetime_Total_Number_of_Gifts__c||Lifetime_Total_Value_of_Gifts__c||COALESCE(to_char(npo02__LastCloseDate__c, ''YYYY-MM-DD''), ''default_string'')||
-- 						Last_Gift_Amount__c||COALESCE(to_char(First_Gift_Date__c, ''YYYY-MM-DD''), ''default_string'')||First_Gift_Amount__c||COALESCE(to_char(Largest_Gift_Date__c, ''YYYY-MM-DD''), ''default_string'')||COALESCE(cast(CY_Giving_for_Giving_Level__c AS varchar), ''default_string'')||
-- 						CASE WHEN X10k_gift_in_CY__c THEN ''true'' ELSE ''false'' END ||
-- 						CASE WHEN X25k_gift_in_CY__c THEN ''true'' ELSE ''false'' END ||COALESCE(cast(npsp__sustainer__c AS varchar), ''default_string'')) AS src_hash,
-- 						id,lifetime_total_number_of_gifts__c,lifetime_total_value_of_gifts__c,npo02__lastclosedate__c,last_gift_amount__c,first_gift_date__c,first_gift_amount__c,largest_gift_date__c,largest_gift_amount__c,cy_giving_for_giving_level__c,x10k_gift_in_cy__c,x25k_gift_in_cy__c
-- 						,npsp__sustainer__c
-- 						FROM npsp_sfdc.account a)';			
			
			
-- 	EXECUTE src_table_SQL;
		
-- 		stg_table_SQL := 'CREATE TABLE npsp_staging.stg_account AS 
-- 					(WITH 
-- 					wealth_screening_account_adj AS 
-- 					(SELECT accountid 
-- 					,lifetime_giving_count__c AS Lifetime_Total_Number_of_Gifts__c
-- 					,lifetime_giving_amount__c::numeric(38,2) AS Lifetime_Total_Value_of_Gifts__c 
-- 					,last_gift_date__c AS npo02__LastCloseDate__c
-- 					,last_gift_amount__c::numeric(38,2) AS Last_Gift_Amount__c 
-- 					,first_gift_date__c AS First_Gift_Date__c 
-- 					,first_gift_amount__c::numeric(38,2) AS First_Gift_Amount__c 
-- 					,largest_gift_date__c AS Largest_Gift_Date__c 
-- 					,largest_gift_amount__c::numeric(38,2) AS Largest_Gift_Amount__c
-- 					FROM npsp_reporting.fact_giving_summary fgs 
-- 					WHERE giving_summary_type = ''Total'' AND accountid IS NOT NULL ),

-- 					sustainer AS (
-- 					select p.organization accountid
-- 					-- prioritze
-- 					,case when p.failing > 0 and p.active > 0 then ''Failing:Active''
-- 					when p.failing > 0 then ''Failing''
-- 					when p.active > 0 then ''Active''
-- 					when p."Inactive--Failed" > 0 then ''Inactive--Failed''
-- 					when p."Inactive--Cancelled" > 0 then ''Inactive--Cancelled''
-- 					when p.Completed > 0 then ''Completed''
-- 					end sustainer_status
-- 					from
-- 					(select rd.organization
-- 					,case when rd.status = ''Lapsed'' then ''Failing''
-- 					when rd.status = ''Active'' then  ''Active''
-- 					when rd.status = ''Closed'' then ''Completed''
-- 					when rd.status = ''Uncollectible'' and rd.closedreason = ''National - Lapsed'' then ''Inactive--Failed''
-- 					when rd.status = ''Uncollectible''  then ''Inactive--Cancelled''
-- 					-- map to active
-- 					when rd.status = ''Paused'' then ''Active''
-- 					END ::varchar aligned_status
-- 					from npsp_sfdc.recurring_donation_v rd
					
-- 					)
-- 					pivot(count(aligned_status) for aligned_status in (''Failing'',''Active'',''Completed'',''Inactive--Failed'',''Inactive--Cancelled'' )  ) p),
					
-- 					giving_level_def AS 
-- 					(select g.npsp_accountid
-- 					,sum(g.amount) CY_Giving_for_Giving_Level__c
-- 					,max(case when g.amount >= 10000 then 1 else 0 end) X10k_gift_in_CY__c
-- 					,max(case when g.amount >= 25000 then 1 else 0 end) X25k_gift_in_CY__c
-- 					,max(g.max_last_updated) Last_Modified_Date
-- 					from ppfa_golden.golden_opportunities_npsp g
-- 					left join npsp_reporting.v_summary_omits om on om.accountid = g.npsp_accountid -- exclusion list
-- 					where g.closedate >= mss.f_current_cy_start_date_static() 
-- 					and g.closedate <= mss.f_current_cy_end_date_static() 
-- 					and (g.sc_office not in (''NP'',''NF'') 
-- 					or (g.sc_office = ''NP'' 
-- 					and right(g.source_code,2) = ''38'')) 
-- 					and g.gau_credit_code not in (''C325015'', ''C325005'', ''11000000000002340'',''11000000000002356'',''C340100TR422ONL'')
-- 					and (left(g.sc_office,1) = ''N'' 
-- 					or (left(g.sc_office,1) <> ''N'' 
-- 					and g.gau_credit_code like ''%CFP%'')) 
-- 					and om.accountid is null
					
-- 					group by g.npsp_accountid)
					
					
-- 					SELECT 
-- 					fnv_hash(a.ID||b.Lifetime_Total_Number_of_Gifts__c||b.Lifetime_Total_Value_of_Gifts__c||COALESCE(to_char(b.npo02__LastCloseDate__c, ''YYYY-MM-DD''), ''default_string'')||
-- 					b.Last_Gift_Amount__c||COALESCE(to_char(b.First_Gift_Date__c, ''YYYY-MM-DD''), ''default_string'')||b.First_Gift_Amount__c||COALESCE(to_char(b.Largest_Gift_Date__c, ''YYYY-MM-DD''), ''default_string'')||COALESCE(cast(c.CY_Giving_for_Giving_Level__c AS varchar), ''default_string'')||
-- 					CASE WHEN c.X10k_gift_in_CY__c THEN ''true'' ELSE ''false'' END ||
-- 					CASE WHEN c.X25k_gift_in_CY__c THEN ''true'' ELSE ''false'' END ||COALESCE(cast(s.sustainer_status AS varchar), ''default_string'')) stg_hash
-- 					,a.ID 
-- 					,b.Lifetime_Total_Number_of_Gifts__c
-- 					,b.Lifetime_Total_Value_of_Gifts__c 
-- 					,b.npo02__LastCloseDate__c
-- 					,b.Last_Gift_Amount__c 
-- 					,b.First_Gift_Date__c 
-- 					,b.First_Gift_Amount__c 
-- 					,b.Largest_Gift_Date__c 
-- 					,b.Largest_Gift_Amount__c
-- 					,c.CY_Giving_for_Giving_Level__c
-- 					,c.X10k_gift_in_CY__c::boolean
-- 					,c.X25k_gift_in_CY__c::boolean
-- 					,s.sustainer_status Sustainer__c
-- 					FROM npsp_sfdc.account_v a
-- 					LEFT JOIN wealth_screening_account_adj b
-- 					ON a.id = b.accountid
-- 					LEFT JOIN giving_level_def c
-- 					ON b.accountid = c.npsp_accountid
-- 					LEFT JOIN sustainer s
-- 					ON a.id = s.accountid
							
-- 					)';

-- 	EXECUTE stg_table_SQL;



-- 	stg_fact_account2 :=  'CREATE TABLE npsp_staging.stg_fact_account AS 
-- 							(SELECT current_timestamp::timestamp as lastModifiedDate
-- 							, a.id 
-- 							,a.lifetime_total_number_of_gifts__c
-- 							,a.lifetime_total_value_of_gifts__c
-- 							, a.npo02__lastclosedate__c			
-- 							, a.last_gift_amount__c			
-- 							, a.first_gift_date__c			
-- 							, a.first_gift_amount__c			
-- 							, a.largest_gift_date__c			
-- 							, a.largest_gift_amount__c			
-- 							, a.cy_giving_for_giving_level__c			
-- 							, a.x10k_gift_in_cy__c			
-- 							, a.x25k_gift_in_cy__c			
-- 							, a.sustainer__c 
-- 							FROM npsp_staging.stg_account a
-- 							JOIN npsp_staging.stg_src_hash_table2 b 
-- 							ON a.id = b.id AND a.stg_hash <> b.src_hash
-- 							)';
-- 	EXECUTE stg_fact_account2;
			

-- 			--6,189,666 4,543,401
-- --		 ;
-- --

-- 			mergeSQL := 'MERGE INTO npsp_reporting.fact_account
-- 						USING npsp_staging.stg_fact_account
-- 						ON npsp_reporting.fact_account.id = npsp_staging.stg_fact_account.id
						
-- 						WHEN MATCHED THEN
-- 							UPDATE SET 
-- 								lastModifiedDate = npsp_staging.stg_fact_account.lastModifiedDate,
-- 								Lifetime_Total_Number_of_Gifts__c = npsp_staging.stg_fact_account.Lifetime_Total_Number_of_Gifts__c,
-- 								Lifetime_Total_Value_of_Gifts__c = npsp_staging.stg_fact_account.Lifetime_Total_Value_of_Gifts__c,
-- 								npo02__LastCloseDate__c = npsp_staging.stg_fact_account.npo02__LastCloseDate__c,
-- 								Last_Gift_Amount__c  = npsp_staging.stg_fact_account.Last_Gift_Amount__c,
-- 								First_Gift_Date__c  = npsp_staging.stg_fact_account.First_Gift_Date__c,
-- 								First_Gift_Amount__c  = npsp_staging.stg_fact_account.First_Gift_Amount__c,
-- 								Largest_Gift_Date__c = npsp_staging.stg_fact_account.Largest_Gift_Date__c,
-- 								Largest_Gift_Amount__c = npsp_staging.stg_fact_account.Largest_Gift_Amount__c,
-- 								CY_Giving_for_Giving_Level__c = npsp_staging.stg_fact_account.CY_Giving_for_Giving_Level__c,
-- 								X10k_gift_in_CY__c = npsp_staging.stg_fact_account.X10k_gift_in_CY__c,
-- 								X25k_gift_in_CY__c = npsp_staging.stg_fact_account.X25k_gift_in_CY__c,
-- 								Sustainer__c = npsp_staging.stg_fact_account.Sustainer__c
-- 						WHEN NOT MATCHED THEN
-- 							INSERT (Id,
-- 									lastModifiedDate,
-- 									Lifetime_Total_Number_of_Gifts__c,
-- 									Lifetime_Total_Value_of_Gifts__c, 
-- 									npo02__LastCloseDate__c,
-- 									Last_Gift_Amount__c, 
-- 									First_Gift_Date__c, 
-- 									First_Gift_Amount__c, 
-- 									Largest_Gift_Date__c, 
-- 									Largest_Gift_Amount__c,
-- 									CY_Giving_for_Giving_Level__c,
-- 									X10k_gift_in_CY__c,
-- 									X25k_gift_in_CY__c,
-- 									Sustainer__c)
-- 							VALUES (
-- 									npsp_staging.stg_fact_account.Id,
-- 									npsp_staging.stg_fact_account.lastModifiedDate,
-- 									npsp_staging.stg_fact_account.Lifetime_Total_Number_of_Gifts__c,
-- 									npsp_staging.stg_fact_account.Lifetime_Total_Value_of_Gifts__c ,
-- 									npsp_staging.stg_fact_account.npo02__LastCloseDate__c,
-- 									npsp_staging.stg_fact_account.Last_Gift_Amount__c ,
-- 									npsp_staging.stg_fact_account.First_Gift_Date__c ,
-- 									npsp_staging.stg_fact_account.First_Gift_Amount__c ,
-- 									npsp_staging.stg_fact_account.Largest_Gift_Date__c ,
-- 									npsp_staging.stg_fact_account.Largest_Gift_Amount__c,
-- 									npsp_staging.stg_fact_account.CY_Giving_for_Giving_Level__c,
-- 									npsp_staging.stg_fact_account.X10k_gift_in_CY__c,
-- 									npsp_staging.stg_fact_account.X25k_gift_in_CY__c,
-- 									npsp_staging.stg_fact_account.Sustainer__c)';
									
-- 		EXECUTE mergeSQL;
	
	
-- 	GET DIAGNOSTICS v_action_count = ROW_COUNT; 
		
--  	UPDATE npsp_integration.job_step_history 
--  	SET runstatus = 'complete',
--  		lastrun = CURRENT_TIMESTAMP,
--  		results  = 'Updated ROWCOUNT: '|| v_action_count::INT,
--  		recordcount = v_action_count::INT
--  	WHERE lastrun = v_inserted_timestamp AND jobstep = 144::integer;
 
 
-- EXCEPTION WHEN OTHERS THEN 
--  	-- Log the error
--  	RAISE INFO 'An exception occurred.';
--  	UPDATE npsp_integration.job_step_history
--  	SET runstatus = 'failed',
--  		lastrun = CURRENT_TIMESTAMP,
--  		notes = 'Error message: '|| SQLERRM 
--  	WHERE lastrun = v_inserted_timestamp AND jobstep = 144::integer; 
	

-- END;
-- $$;