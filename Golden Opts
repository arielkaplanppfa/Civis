-- Policy Doc https://docs.google.com/document/d/1L-_3T8CkWf97ktHPx6g04K23CP7VFXA97z0dNYlWrBc/edit?usp=sharing
-- Template Doc https://docs.google.com/document/d/1ymR07fgoDGul5c2wnsAhTcfiUzE4X11ZNdXaiCEAgNI/edit?usp=sharing


---/*
drop table if exists ppfa_golden.golden_opts;
create table ppfa_golden.golden_opts as (select current_date as temp);

alter table ppfa_golden.golden_opts add column ppid varchar(256);
alter table ppfa_golden.golden_opts add column contact_method_type varchar(256); 
alter table ppfa_golden.golden_opts add column join_key varchar(256); -- If this is unnecessary, we can remove this
alter table ppfa_golden.golden_opts add column contact_method varchar(256); -- Contact method	
alter table ppfa_golden.golden_opts add column contact_method_2 varchar(256); -- Address_line 2
alter table ppfa_golden.golden_opts add column contact_method_3 varchar(256); -- Address_line 3
alter table ppfa_golden.golden_opts add column city varchar(256);
alter table ppfa_golden.golden_opts add column state varchar(256);
alter table ppfa_golden.golden_opts add column zip varchar(256);
alter table ppfa_golden.golden_opts add column mass_mail varchar(256); -- 3
alter table ppfa_golden.golden_opts add column mass_call varchar(256); -- 1
alter table ppfa_golden.golden_opts add column mass_text varchar(256); -- 4
alter table ppfa_golden.golden_opts add column ind_text varchar(256); -- 5 Van for Now, Hustle maybe later
alter table ppfa_golden.golden_opts add column mass_email varchar(256); -- 2
alter table ppfa_golden.golden_opts add column high_touch varchar(256);
alter table ppfa_golden.golden_opts drop column  temp;




--Addresses
Insert into ppfa_golden.golden_opts
with temp as (
  select *, row_number() over(partition by ppid, m_address_key order by address_rank asc) as dupe_digit from ppfa_golden.staging_mailing_address
  )
  select ppid, 'Address', m_address_key , street_1, street_2, street_3, city, state, zip,null as one, null as two, null as three, null as four, null as five, null as six
  from temp
  where dupe_digit = 1;
  
  
--Phones
insert into ppfa_golden.golden_opts
with temp as (
  select *, row_number() over(partition by resolved_id,phone order by phone_rank asc) as dupe_digit from ppfa_golden.staging_phones
  )
  select resolved_id, 'Phone', source_key, phone, null as one, null as two, null as three, null as four, null as five, null as six, null as seven, null as eight, null as nine, null as ten, null as eleven  
  from temp
  where dupe_digit = 1;


--TESTING WITH THIS IN
----
Insert into ppfa_golden.golden_opts
select resolved_id, 'Phone', source_primary_key, phone_number, null as one, null as two, null as three, null as four, null as five, null as six, null as seven, null as eight, null as nine, null as ten, null as eleven  
  from mobile_commons.nt_subscribers s 
  join idres_analytics.current_customer_graph ccg on ccg.source_primary_key = s.profile_id and ccg.source = 'mobilecommons'
  where not exists ( select 'x' from ppfa_golden.staging_phones sp where sp.resolved_id = ccg.resolved_id and s.phone_number = sp.phone  );
  ------

--emails
insert into ppfa_golden.golden_opts
with temp as (
  select *, row_number() over(partition by resolved_id,email order by rank asc) as dupe_digit from ppfa_golden.golden_emails_staging
  )
  select resolved_id, 'Email', source_email_id, email, null as one, null as two, null as three, null as four, null as five, null as six, null as seven, null as eight, null as nine, null as ten, null as eleven 
  from temp
  where dupe_digit = 1;
  
  
  
  update ppfa_golden.golden_opts
  set high_touch = 'Y'
  where exists (
    select 'x' from ppfa_golden.high_touch ht
where ppfa_golden.golden_opts.ppid = ht.ppid and (giving_level in ('Major Donor','Mid-Level VIP', 'Mid-Level High') or (corporations is not null or foundation is not null or planned_giving is not null or prospect_management is not null or board_member is not null))
    );
  
  
 -- Base Mailable Addresses  --C3  -- All Supporters
 create temporary table mailable as 
 with temp as (
select ppid, m_address_key --all mailable address
from ppfa_golden.staging_mailing_address sa
where do_not_mail = 'false'
MINUS -- do not mails address level
select ppid, m_address_key
from ppfa_golden.staging_mailing_address sa
where do_not_mail = 'true'
MINUS --van date suppressed
select ppid, m_address_key
from ppfa_golden.staging_mailing_address sa
join vansync.ppfa_contactsaddresses_mym m on sa.address_id = m.contactsaddressid
where m.datesuppressed is not null
MINUS -- van no mails -- Contact level
select ppid, m_address_key
from ppfa_golden.staging_mailing_address ma
join vansync.ppfa_contacts_mym_cont c on ma.source_key = c.vanid
where c.nomail = '1')
select distinct ppid, m_address_key from temp;

update ppfa_golden.golden_opts 
set mass_mail = '3'
from mailable m 
where ppfa_golden.golden_opts.ppid = m.ppid and ppfa_golden.golden_opts.join_key = m.m_address_key; 

--rD No contacts and mails
Create temporary table no_mail as (
select distinct idr.resolved_id
from rounddata.contact c 
join idres_analytics.current_customer_graph idr on c.id = idr.source_primary_key
join rounddata.rc_bios__preference p on  c.accountid = p.rc_bios__account
where (upper(p.rc_bios__code_value) in ('NOMAIL','NO MAIL PRM') or rc_bios__subcategory = 'Do Not Contact') and p.rc_bios__active = 'true');
-- */
 
 --Base Mailable Addresses C4 --Those who have made a c4 gift (AK - 11/17/20 - should we add those that have an action fund membership? )
 create temporary table c4_mailable as 
 with temp as (
select ppid, m_address_key --all mailable address
from ppfa_golden.staging_mailing_address sa
where exists ( select 'x' from idres_analytics.current_customer_graph idr join rounddata.contact c on idr.source_primary_key = c.id join rounddata.supreme_reporting_table srt on srt.ngoc_accountid = c.accountid  and source_code like '4NA%' and idr.resolved_id  = sa.ppid )
and do_not_mail = 'false'
MINUS -- do not mails address level
select ppid, m_address_key
from ppfa_golden.staging_mailing_address sa
where do_not_mail = 'true'
MINUS --van date suppressed
select ppid, m_address_key
from ppfa_golden.staging_mailing_address sa
join vansync.ppfa_contactsaddresses_mym m on sa.address_id = m.contactsaddressid
where m.datesuppressed is not null
MINUS -- van no mails -- Contact level
select ppid, m_address_key
from ppfa_golden.staging_mailing_address ma
join vansync.ppfa_contacts_mym_cont c on ma.source_key = c.vanid
where c.nomail = '1')
select distinct ppid, m_address_key from temp;
 
update ppfa_golden.golden_opts 
set mass_mail = coalesce(mass_mail,'')||'4'
from c4_mailable m 
where ppfa_golden.golden_opts.ppid = m.ppid and ppfa_golden.golden_opts.join_key = m.m_address_key; 
 
 --Base Mailable Addresses PAC -- All ACtion Fund Members
 create temporary table Pac_mailable as 
 with temp as (
select ppid, m_address_key --all mailable address
from ppfa_golden.staging_mailing_address sa
where exists ( select 'x' from ppfa_golden.golden_membership gm where active = 'Y' and gm.ppid = sa.ppid )
and do_not_mail = 'false'
MINUS -- do not mails address level
select ppid, m_address_key
from ppfa_golden.staging_mailing_address sa
where do_not_mail = 'true'
MINUS --van date suppressed
select ppid, m_address_key
from ppfa_golden.staging_mailing_address sa
join vansync.ppfa_contactsaddresses_mym m on sa.address_id = m.contactsaddressid
where m.datesuppressed is not null
MINUS -- van no mails -- Contact level
select ppid, m_address_key
from ppfa_golden.staging_mailing_address ma
join vansync.ppfa_contacts_mym_cont c on ma.source_key = c.vanid
where c.nomail = '1')
select distinct ppid, m_address_key from temp; 
 
 update ppfa_golden.golden_opts 
set mass_mail = coalesce(mass_mail,'')||'P'
from Pac_mailable m 
where ppfa_golden.golden_opts.ppid = m.ppid and ppfa_golden.golden_opts.join_key = m.m_address_key; 


create temporary table votes_mailable as --Existing relationship
 with recency as (
select ccg.resolved_id as ppid, row_number() over (partition by resolved_id order by es.datemodified desc) as row_num, emailsubscriptionstatusname
from idres_analytics.current_customer_graph ccg 
join vansync.ppfa_contactsemails_mym ce on ccg.source_primary_key = ce.vanid and ccg.source ilike '%van%'  --Contacts Emails table
join vansync.ppfa_emailsubscriptions_mym s on ce.email = s.email
join vansync.ppfa_emailsubscriptionstatuses es on s.emailsubscriptionstatusid = es.emailsubscriptionstatusid
where s.committeeid = '74821' -- and emailsubscriptionstatusname = 'Subscribed'
order by 1, 2 asc),
temp as(
select ppid
from recency
where row_num = 1 and emailsubscriptionstatusname = 'Subscribed'
MINUS -- do not mails address level
select ppid
from ppfa_golden.staging_mailing_address sa
where do_not_mail = 'true'
MINUS --van date suppressed
select ppid
from ppfa_golden.staging_mailing_address sa
join vansync.ppfa_contactsaddresses_mym m on sa.address_id = m.contactsaddressid
where m.datesuppressed is not null
MINUS -- van no mails -- Contact level
select ppid
from ppfa_golden.staging_mailing_address ma
join vansync.ppfa_contacts_mym_cont c on ma.source_key = c.vanid
where c.nomail = '1')
select distinct ppid from temp; 
 
  update ppfa_golden.golden_opts 
set mass_mail = coalesce(mass_mail,'')||'V'
from votes_mailable m 
where ppfa_golden.golden_opts.ppid = m.ppid; 
 
 
--/* 
update ppfa_golden.golden_opts 
  set mass_mail = null 
  from no_mail
  where ppfa_golden.golden_opts.ppid = no_mail.resolved_id;
 --*/
 
 --Mass Email
 create temporary table opts as 
 with temp as (
select distinct cccg.resolved_id as "ppid", ce.email as "Email", 
Case 
when s.committeeid = '11607' then '3'
when s.committeeid = '9816' then '4'
when s.committeeid = '68255' then 'P'
when s.committeeid = '74821' then 'V' end as entity,
Case when es.emailsubscriptionstatusname = 'Subscribed' then 'In' else 'Out' end as opt,
 s.datemodified as date
from idres_analytics.current_customer_graph cccg 
join vansync.ppfa_contactsemails_mym ce on cccg.source_primary_key = ce.vanid and cccg.source ilike '%van%'  --Contacts Emails table
join vansync.ppfa_emailsubscriptions_mym s on ce.email = s.email
join vansync.ppfa_emailsubscriptionstatuses es on s.emailsubscriptionstatusid = es.emailsubscriptionstatusid
join ppfa_golden.committeeid_translation com on s.committeeid = com.committeeid
where s.committeeid in ('9816','11607','68255','74821')
/* -- Removed preference considerations as per policy Doc
   UNION
select 
distinct ccg.resolved_id as "ppid", aci.valuex as "email",ent.entity, 'Out' as opt, p.createddate as date
from idres_analytics.current_customer_graph ccg
join rounddata.contact c on ccg.source_primary_key = c.id
join rounddata.additional_contact_info aci on c.id = aci.contact and aci.typex = 'Email'
join rounddata.rc_bios__preference p on c.accountid = p.rc_bios__account and p.rc_bios__subcategory in ('Do Not Contact') and p.delete_flag <> 'Y' and p.rc_bios__active ilike 'true'
join 
( Select '3' as entity UNION select '4' UNION select 'P' UNION select 'V') ent  on 1=1 -- To generate a row for every entity, it dupes the row with 3 then 4 etc..
   */
UNION -- New code for SF email level opt outs
select distinct
 graphe.resolved_id as "ppid", aci.valuex as email, ent.entity, 'Out' as opt, aci.lastmodifieddate as date
  FROM rounddata.additional_contact_info aci
 join idres_analytics.current_customer_graph graphe on aci.contact = graphe.source_primary_key
   join 
( Select '3' as entity UNION select '4' UNION select 'P' UNION select 'V') ent  on 1=1 -- To generate a row for every entity, it dupes the row with 3 then 4 etc.. 
 where aci.typex = 'Email' and delete_flag <> 'Y' and opt_out = 'true'   
),
temptwo as (
 select *,
 row_number() over(partition by ppid, email, entity order by date desc) as recency_rank 
  from temp
  order by ppid, email, entity asc, row_number() over(partition by ppid, email, entity order by date desc) asc
 ),
 tempthree as (
   select ppid, email, listagg(entity) within group (order by entity asc) as opts from temptwo
   where opt = 'In' and recency_rank = '1'
   group by ppid, email)
 select * from tempthree;
 
 update ppfa_golden.golden_opts set mass_email = opts.opts
 from opts
 where opts.ppid = golden_opts.ppid and opts.email = golden_opts.contact_method;
 
 --Opt out Suppressions
 
 --EA Activist Codes
 update ppfa_golden.golden_opts set mass_email = null
 from (
   select distinct
 graphe.resolved_id::varchar(100) as resolved_id
  FROM vansync.ppfa_activistcodes as aaa
inner join vansync.ppfa_contactsactivistcodes_mym as bbb
on aaa.activistcodeid = bbb.activistcodeid
inner join ppfa_golden.current_customer_graph as graphe
on bbb.vanid = graphe.source_primary_key
  where aaa.activistcodename in ('wj_lead','Inactive','PPOL: No Comm') ) as optout
  where optout.resolved_id = golden_opts.ppid;
 
 -- Mass Text
 create temporary table mc_opt as 
 /*
with temp as (
  --My tables
  select ccg.resolved_id as ppid, s.phone_number, activated_at:: date as start_date, run_date:: date as updated_at,
case when campaign_id = '180941' then 'V' when campaign_id = '193425' then '3' when campaign_id = '154363' then '4' else null end as entity,
case when opted_out_at is null then 'in' else 'out' end as opt
from mobile_commons.nt_subscribers s 
join idres_analytics.current_customer_graph ccg on s.profile_id = ccg.source_primary_key
where campaign_id in ('193425','154363','180941')
UNION
  -- Annes Tables
select  ccg.resolved_id as ppid, coalesce(p.phone_number, pp.phone_number),
activated_at:: date as start_date, s.created_at:: date as updated_at,
case when campaign_id = '180941' then 'V' when campaign_id = '193425' then '3' when campaign_id = '154363' then '4' else null end as entity,
case when s.opted_out_at is null then 'in' else 'out' end as opt 
from mobile_commons.depreciated_subscriptions s 
left join mobile_commons.depreciated_profiles p on s.profile_id = p.profile_id
left join mobile_commons.profiles pp on s.profile_id = pp.profile_id
join idres_analytics.current_customer_graph ccg on s.profile_id = ccg.source_primary_key
where campaign_id in ('193425','154363','180941') ),
temptwo as (
select *,
row_number() over(partition by ppid, phone_number, entity order by updated_at desc) as rec_rank
from temp)
select * from temptwo
order by ppid, phone_number, entity, rec_rank asc; */

With temp as (
select coalesce(ccg.resolved_id, s.profile_id:: varchar) as ppid, s.phone_number, s.activated_at:: date as start_date, run_date:: date as updated_at,
case when campaign_id = '180941' then 'V' when campaign_id = '193425' then '3' when campaign_id = '154363' then '4' else null end as entity,
case when opted_out_at is null then 'in' else 'out' end as opt
from mobile_commons.nt_subscribers s 
left join idres_analytics.current_customer_graph ccg on s.profile_id = ccg.source_primary_key --profiles not in the the profiles table will nopt be in the ccg and therefore phones and therefore opts
),
temptwo as (
select *,
row_number() over(partition by ppid, phone_number, entity order by updated_at desc) as rec_rank
from temp)
select * from temptwo
order by ppid, phone_number, entity, rec_rank asc;
/*
-- Do Not Contacts
create temporary table suppress as 
select distinct ccg.resolved_id, p.rc_bios__start_date:: date, p.lastmodifieddate:: date
from rounddata.rc_bios__preference p
join rounddata.contact c on p.rc_bios__account = c.accountid and c.delete_flag <> 'Y'
join idres_analytics.current_customer_graph ccg on c.id = ccg.source_primary_key
where rc_bios__subcategory ilike 'Do Not Contact' and p.delete_flag <> 'Y' and  (rc_bios__end_date is null or rc_bios__end_date:: date >= sysdate)
UNION
select ccg.resolved_id, datecreated:: date as start_date, datemodified:: date as lastmodifieddate
from vansync.ppfa_contactsactivistcodes_mym a
join idres_analytics.current_customer_graph ccg on a.vanid = ccg.source_primary_key and source ilike '%van%'
 where activistcodeid = '4402974';
 */-- TESTING TAKING THIS OUT
 --Suppress the more recent opt outs
 create temporary table mc_opt_in as 
select * from 
mc_opt o 
where opt = 'in' and rec_rank = 1 ;
--and not exists ( select 'x' from suppress s where s.resolved_id = o.ppid and s.rc_bios__start_date > o.start_date); TESTING TAKING THIS OUT
 
 --Update golden table
update ppfa_golden.golden_opts set mass_text = opts
from 
(
  select ppid,
  case when length(phone_number ) = 11 then right(phone_number, 10) else phone_number:: varchar end as phone_number, listagg(entity) within group (order by entity asc) as opts 
from akaplan.mc_opt_in
   group by ppid, case when length(phone_number) = 11 then right(phone_number, 10) else phone_number:: varchar end
 ) t
  where t.ppid = golden_opts.ppid and t.phone_number:: varchar = golden_opts.contact_method; --profiles not in the the profiles table will nopt be in the ccg and therefore phones and therefore opts
 
 
 
 
 --Mass text
 /*'PPOL: No Comm' needs to be suppressed from mass text*/
 
 
 --Anti's Suppression
 update ppfa_golden.golden_opts set mass_mail = null, mass_email = null, mass_call = null, mass_text = null, ind_text = null
 from (
   select distinct
 graphe.resolved_id::varchar(100) as resolved_id
  FROM vansync.ppfa_activistcodes as aaa
inner join vansync.ppfa_contactsactivistcodes_mym as bbb
on aaa.activistcodeid = bbb.activistcodeid
inner join ppfa_golden.current_customer_graph as graphe
on bbb.vanid = graphe.source_primary_key
  where aaa.activistcodename in ('Anti-Choice','Anti-PP') ) as anti
  where anti.resolved_id = golden_opts.ppid;